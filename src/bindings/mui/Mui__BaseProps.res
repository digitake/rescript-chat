type callbackProps = {
  onBlur?: ReactEvent.Focus.t => unit,
  onContextMenu?: ReactEvent.Mouse.t => unit,
  onDragLeave?: ReactEvent.Mouse.t => unit,
  onFocus?: ReactEvent.Focus.t => unit,
  onKeyDown?: ReactEvent.Keyboard.t => unit,
  onKeyPress?: ReactEvent.Keyboard.t => unit,
  onKeyUp?: ReactEvent.Keyboard.t => unit,
  onMouseDown?: ReactEvent.Mouse.t => unit,
  onMouseEnter?: ReactEvent.Mouse.t => unit,
  onMouseLeave?: ReactEvent.Mouse.t => unit,
  onMouseUp?: ReactEvent.Mouse.t => unit,
  onTouchEnd?: ReactEvent.Touch.t => unit,
  onTouchMove?: ReactEvent.Touch.t => unit,
  onTouchStart?: ReactEvent.Touch.t => unit,
  onClick?: ReactEvent.Mouse.t => unit,
  onDoubleClick?: ReactEvent.Mouse.t => unit,
}

type base = {
  ...callbackProps,
  className?: string,
  style?: ReactDOM.Style.t,
  ref?: ReactDOM.domRef,
  id?: string,
}

type formBase= {
  form?: string,
  name?: string,
  value?: string,
  disabled?: bool,
  autoFocus?: bool,
  tabIndex?: int,
  autoComplete?: string,
  autoCapitalize?: string,
  autoCorrect?: string,
  spellCheck?: bool,
  accessKey?: string,
  contentEditable?: bool,
  dir?: string,
  draggable?: bool,
  hidden?: bool,
  lang?: string,
  role?: string,
  slot?: string,
  spellcheck?: bool,
  title?: string,
  translate?: string,
  ariaActiveDescendant?: string,
  ariaAtomic?: bool,
  ariaBusy?: bool,
  ariaControls?: string,
  ariaDescribedBy?: string,
  ariaDisabled?: bool,
  ariaDropEffect?: string,
  ariaExpanded?: bool,
  ariaFlowTo?: string,
  ariaGrabbed?: bool,
  ariaHasPopup?: bool,
  ariaHidden?: bool,
  ariaInvalid?: bool,
  ariaLabel?: string,
  ariaLabelledBy?: string,
  ariaLive?: string,
  ariaOwns?: string,
  ariaRelevant?: string,
  ariaSelected?: bool,
  ariaSetSize?: int,
  ariaSort?: string,
  ariaValueMax?: float,
  ariaValueMin?: float,
  ariaValueNow?: float,
  ariaValueText?: string,
}

type inputBase = {
  name?: string,
  step?: int,
  min?: int,
  max?: int,
  @as("type") type_?: string,
  @as("aria-labelledby") ariaLabelledby?: string,
  @as("disableunderline") disableUnderline?: string,
  maxLength?: int,
}