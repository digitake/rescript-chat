type callbackProps = {
  onBlur?: ReactEvent.Focus.t => unit,
  onContextMenu?: ReactEvent.Mouse.t => unit,
  onDragLeave?: ReactEvent.Mouse.t => unit,
  onFocus?: ReactEvent.Focus.t => unit,
  onKeyDown?: ReactEvent.Keyboard.t => unit,
  onKeyPress?: ReactEvent.Keyboard.t => unit,
  onKeyUp?: ReactEvent.Keyboard.t => unit,
  onMouseDown?: ReactEvent.Mouse.t => unit,
  onMouseEnter?: ReactEvent.Mouse.t => unit,
  onMouseLeave?: ReactEvent.Mouse.t => unit,
  onMouseUp?: ReactEvent.Mouse.t => unit,
  onTouchEnd?: ReactEvent.Touch.t => unit,
  onTouchMove?: ReactEvent.Touch.t => unit,
  onTouchStart?: ReactEvent.Touch.t => unit,
  onClick?: ReactEvent.Mouse.t => unit,
  onDoubleClick?: ReactEvent.Mouse.t => unit,
}

type base = {
  ...callbackProps,
  className?: string,
  style?: ReactDOM.Style.t,
  ref?: ReactDOM.domRef,
  id?: string,
}

type formBase= {
  form?: string,
  name?: string,
  value?: string,
  disabled?: bool,
  autoFocus?: bool,
  tabIndex?: int,
  autoComplete?: string,
  autoCapitalize?: string,
  autoCorrect?: string,
  spellCheck?: bool,
  accessKey?: string,
  contentEditable?: bool,
  dir?: string,
  draggable?: bool,
  hidden?: bool,
  lang?: string,
  role?: string,
  slot?: string,
  spellcheck?: bool,
  title?: string,
  translate?: string,
  @as("aria-active-descendant") ariaActiveDescendant?: string,
  @as("aria-atomic") ariaAtomic?: bool,
  @as("aria-busy") ariaBusy?: bool,
  @as("aria-controls") ariaControls?: string,
  @as("aria-describedby") ariaDescribedBy?: string,
  @as("aria-disabled") ariaDisabled?: bool,
  @as("aria-drop-effect") ariaDropEffect?: string,
  @as("aria-expanded") ariaExpanded?: bool,
  @as("aria-flowto") ariaFlowTo?: string,
  @as("aria-grabbed") ariaGrabbed?: bool,
  @as("aria-haspopup") ariaHasPopup?: bool,
  @as("aria-hidden") ariaHidden?: bool,
  @as("aria-invalid") ariaInvalid?: bool,
  @as("aria-label") ariaLabel?: string,
  @as("aria-labelledby") ariaLabelledBy?: string,
  @as("aria-live") ariaLive?: string,
  @as("aria-owns") ariaOwns?: string,
  @as("aria-relevant") ariaRelevant?: string,
  @as("aria-selected") ariaSelected?: bool,
  @as("aria-setsize") ariaSetSize?: int,
  @as("aria-sort") ariaSort?: string,
  @as("aria-valuemax") ariaValueMax?: float,
  @as("aria-valuemin") ariaValueMin?: float,
  @as("aria-valuenow") ariaValueNow?: float,
  @as("aria-valuetext") ariaValueText?: string,
}

type inputBase = {
  name?: string,
  step?: int,
  min?: int,
  max?: int,
  @as("type") type_?: string,
  @as("aria-labelledby") ariaLabelledby?: string,
  @as("disableunderline") disableUnderline?: string,
  maxLength?: int,
}

type touchRipple